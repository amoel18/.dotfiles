--	local api = vim.api
--	local lspconfig = require 'lspconfig'
--	local global = require 'core.global'
--	local format = require('modules.completion.format')
--
--	local custom_on_attach = function(client, bufnr)
--		api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')
--
--		-- Mappings.
--
--		local opts = {
--			noremap=true,
--			silent=true,
--		}
--		local function nmap_lsp(keys, cmd)
--			api.nvim_buf_set_keymap(
--				bufnr, 'n', keys, '<cmd>lua vim.lsp.'..cmd..'<CR>', opts
--			)
--		end
--		nmap_lsp('gd',    'buf.declaration()')
--		nmap_lsp('<c-]>', 'buf.definition()')
--		nmap_lsp('K',     'buf.hover()')
--		nmap_lsp('D',     'util.show_line_diagnostics()')
--		nmap_lsp('gi',    'util.implementation()')
--		nmap_lsp('<C-k>', 'buf.signature_help()')
--		nmap_lsp(',rn',   'buf.rename()')
--		nmap_lsp('gy',    'buf.type_definition()')
--		nmap_lsp('pd',    'buf.peek_definition()')
--		nmap_lsp('gr',    'buf.references()')
--		nmap_lsp(']d',    'diagnostic.goto_next()')
--		nmap_lsp('[d',    'diagnostic.goto_prev()')
--		nmap_lsp('<leader>do',    'diagnostic.set_loclist()')
--		-- api.nvim_set_var('diagnostic_enable_virtual_text','1')
--		require'completion'.on_attach()
--		-- lsp_status.on_attach(client)
--	end
--
--
--
--
--	local saga = require 'lspsaga'
--	saga.init_lsp_saga({
--		code_action_icon = 'ïŒƒ'
--	})
--
--	local capabilities = vim.lsp.protocol.make_client_capabilities()
--	capabilities.textDocument.completion.completionItem.snippetSupport = true
--
--	function _G.reload_lsp()
--		vim.lsp.stop_client(vim.lsp.get_active_clients())
--		vim.cmd [[edit]]
--	end
--
--	function _G.open_lsp_log()
--		local path = vim.lsp.get_log_path()
--		vim.cmd("edit " .. path)
--	end
--
--	vim.cmd('command! -nargs=0 LspLog call v:lua.open_lsp_log()')
--	vim.cmd('command! -nargs=0 LspRestart call v:lua.reload_lsp()')
--
--	vim.lsp.handlers['textDocument/publishDiagnostics'] = vim.lsp.with(
--		vim.lsp.diagnostic.on_publish_diagnostics, {
--			-- Enable underline, use default values
--			underline = true,
--			-- Enable virtual text, override spacing to 4
--			virtual_text = true,
--			signs = {
--				enable = true,
--				priority = 20
--			},
--			-- Disable a feature
--			update_in_insert = false,
--	})
--
--	local enhance_attach = function(client,bufnr)
--		if client.resolved_capabilities.document_formatting then
--			format.lsp_before_save()
--		end
--		api.nvim_buf_set_option(bufnr, "omnifunc", "v:lua.vim.lsp.omnifunc")
--	end
--
--	lspconfig.gopls.setup {
--		cmd = {"gopls","--remote=auto"},
--		on_attach = enhance_attach,
--		capabilities = capabilities,
--		init_options = {
--			usePlaceholders=true,
--			completeUnimported=true,
--		}
--	}
--
--	lspconfig.texlab.setup{
--		name = 'texlab_fancy';
--		settings = {
--			latex = {
--				build = {
--					onSave = true;
--				}
--			}
--		}
--	}
--
--
--
--	lspconfig.tsserver.setup {
--		on_attach = function(client)
--			client.resolved_capabilities.document_formatting = false
--			enhance_attach(client)
--		end
--	}
--
--	lspconfig.clangd.setup {
--		cmd = {
--			"clangd",
--			"--background-index",
--			"--suggest-missing-includes",
--			"--clang-tidy",
--			"--header-insertion=iwyu",
--		},
--	}
--
--	lspconfig.rust_analyzer.setup {
--		capabilities = capabilities,
--	}
--
--	local servers = {
--		'dockerls','bashls','pyright',
--	}
--
--	for _,server in ipairs(servers) do
--		lspconfig[server].setup {
--			on_attach = enhance_attach
--		}
--	end
--
--	lspconfig.vimls.setup{
--		on_attach = custom_on_attach
--	}
--	lspconfig.efm.setup{
--		on_attach = custom_on_attach,
--		-- only run on configured filetypes
--		filetypes = {'pandoc', 'markdown', 'gfm', 'markdown.pandoc.gfm', 'rst','sh','vim','make','yaml','dockerfile'},
--	}
--
--	local custom_on_attach_folding = function(client, bufnr)
--		custom_on_attach(client, bufnr)
--		require('folding').on_attach()
--	end
--
--	local custom_on_attach_nlua = function(client, bufnr)
--		custom_on_attach_folding(client, bufnr)
--	end
--	require('nlua.lsp.nvim').setup(lspconfig, {
--		on_attach = custom_on_attach_nlua,
--		settings = {
--			Lua = {
--				runtime = {
--					version = "LuaJIT"
--				}
--			}
--		}
--	})
