set -g prefix C-a
bind C-a send-prefix
# move around panes with hjkl, as one would in vim after pressing ctrl-w
# for nested tmux sessions
bind-key a send-prefix

# force SHELL ENV variable as shell
SHELL=/bin/zsh
#set-option -g default-shell ${SHELL}
set-option -g default-command ${SHELL}
bind & display ${SHELL}
# escape-time
# swap pane
set -sg escape-time 0
# Activity Monitoring
setw -g monitor-activity on
set -g visual-activity off
set-option -g status-keys vi
set-option -s escape-time 0
set-window-option -g mode-keys vi
# Window
#set-option -g window-style "bg=black"
#set-option -g window-active-style "bg=terminal"
set -g window-style 'bg=default'
set -g window-active-style 'bg=default'
#set-option -g default-terminal "screen-256color"
# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# make delay shorter
set -sg escape-time 10
set-option -g focus-events on

# tile all windows
unbind =
bind = select-layout tiled

# cycle through panes
# unbind C-a
# unbind o # this is the default key for cycling panes
# bind ^A select-pane -t:.+
# better splitting

# resize panes like vim
# feel free to change the "1" to however many lines you want to resize by, only
# one at a time can be slow
# Set new panes to open in current directory
bind c new-window -c "#{pane_current_path}"
bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind < resize-pane -L 10
bind > resize-pane -R 10
bind - resize-pane -D 10
bind + resize-pane -U 10
bind . split-window -h -c "#{pane_current_path}"
bind , split-window -v -c "#{pane_current_path}"

# less colourful status
#set -g status-bg colour240
#set -g status-fg white
# 256 colors support
#set -g default-terminal "screen-256color"
#TERM=screen-256color

#set -g default-terminal "screen-256color"

#set-option -ga terminal-overrides ",xterm-256color:Tc"
# sane scrolling
#set -g mouse on
# list of plugins

# TMUX plugin manager (keep at the bottom of tmux.conf)
#run -b '~/.config/.tmux/plugins/tpm/tpm'
##########################################
# improve colors
##########################################
#set -g default-terminal 'screen-256color'

# tmux-resurrect
set -g @resurrect-capture-pane-contents 'on'
# save vim session
set -g @resurrect-strategy-vim 'session'
# save neovim session
set -g @resurrect-strategy-nvim 'session'

##########################################
# load powerline
##########################################
#source "/Volumes/Workspace/Utilities/powerline/powerline/bindings/tmux/powerline.conf"

##########################################
# act like vim
##########################################
setw -g mode-keys vi

##########################################
# split panes using | and -
##########################################
bind | split-window -h
bind - split-window -v
unbind '"'
unbind %

# Quicker session kill
bind X confirm-before kill-session

# reload the configuration file for tmux

#bind s source-file ~/.tmux/session1

# Enable mouse mode (tmux 2.1 and above)
set -g mouse on
#bind-key -t vi-copy MouseDragEnd1Pane copy-selection -x
#set -g prefix3 C-s

# start window numbers at 1 to match keyboard order with tmux window order
set -g base-index 1
set-window-option -g pane-base-index 1

# renumber windows sequentially after closing any of them
set -g renumber-windows on

# increase scrollback lines
set -g history-limit 10000

# rebind leader key to Ctrl+a
unbind C-b
set -g prefix C-a

##########################################
# Experimental
##########################################

# enable mouse support
# Start copy mode when scrolling up
#bind -n WheelUpPane copy-mode

# Enable our custom option to exit copy mode when scrolling past bottom
#set-window-option -g exit-copy-past-bottom on

# soften status bar color from harsh green to light gray
#set -g status-bg '#666666'
#set -g status-fg '#aaaaaa'

# remove administrative debris (session name, hostname, time) in status bar
#set -g status-left ''
#set -g status-right ''


# reload config file
bind r source-file ~/.tmux/tmux.conf \; display "Config Reloaded!"                                                                                                                                           #                                                                                                                                                                                     log_level: Warn
# synchronize all panes in a window
bind y setw synchronize-panes
# Base16 Styling Guidelines:

set -g status-left-length 32
set -g status-right-length 150
set -g status-interval 5



# default statusbar colors

set-window-option -g window-status-format " #I #W"

# active window title colors
set-window-option -g window-status-current-format " #I #W"

# pane border colors
set -g status off
tm_session_name=""

bind 'e' split-window "exec htop"
set -g status-left ""
set-option -g status-style bg=#0f1419,fg=#e6e1cf

set-option -g status-left ' '
set-option -g status-right '#[fg=white,bg=default]#[fg=brightblack,bg=black]%F %a#[fg=black,bg=default] #[fg=white,bg=white]#[fg=brightblack,bg=black]%H:%M#[fg=black,bg=default] '
#set -g status-left "#[fg=$GREEN][#S] #[fg=$RED]w#I #[fg=$white]p#P"
set-option -g window-status-current-format '#[fg=#73d0ff,bg=black] #W'
set-option -g window-status-format '#[fg=brightblack,bg=default]  #W  #[fg=brightblack,bg=default]'
tm_tunes="#[bg=$base00,fg=$base0D] ♫ #(osascript -l JavaScript ~/.dotfiles/applescripts/tunes.js)"
tm_battery="#[fg=$base0F,bg=$base00] ♥ #(battery)"
tm_date="#[default,bg=$base00,fg=$base0C] %R"
tm_host="#[fg=$base0E,bg=$base00] #h "
# set -g status-right " "
# set-option -ag status-right "#[fg=red,dim,bg=default]#(uptime | cut -f 4-5 -d ' ' | cut -f 1 -d ',') "
set -g status-interval 2

set-option -g history-limit 10000

#border colours
set -g status-interval 60
set -g pane-border-style fg=black,bg=default
set -g pane-active-border-style fg='#556b79,bold,bg=default,bold'

set-option -g renumber-windows on
set-option -g status-justify left
set -g status-right "#S #[fg=green,bg=black]#(tmux-mem-cpu-load --colors --interval 2)#[default]"
set -g status-right-length 60
  bind C-l send-keys 'C-l'
  bind-key C-o rotate-window
  bind-key + select-layout main-horizontal
  bind-key = select-layout main-vertical
  set-window-option -g other-pane-height 10
  set-window-option -g other-pane-width 90
  bind-key a last-pane
  bind-key q display-panes
  bind-key t new-window -c "#{pane_current_path}"
  bind-key T previous-window
  bind-key [ copy-mode
  bind-key ] paste-buffer
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

#set -g default-terminal "tmux-256color"
#set-option -ga terminal-overrides ",*256col*:Tc"
#set -g default-terminal 'tmux-256color'
#set -gs terminal-overrides ',*-256color:Tc'
set  -g default-terminal "tmux-256color"
set -ga terminal-overrides ",alacritty:RGB"

# Swap pane
bind-key -n M-H swap-pane -s '{left-of}'
bind-key -n M-J swap-pane -s '{down-of}'
bind-key -n M-K swap-pane -s '{up-of}'
bind-key -n M-L swap-pane -s '{right-of}'

# Resize pane
bind-key -r H resize-pane -L 2
bind-key -r J resize-pane -D 2
bind-key -r K resize-pane -U 2
bind-key -r L resize-pane -R 2
bind-key -n M-f resize-pane -Z

# Focus window or create if not exist
bind-key -n M-1 if-shell 'tmux select-window -t :1' '' 'new-window -t :1'
bind-key -n M-2 if-shell 'tmux select-window -t :2' '' 'new-window -t :2'
bind-key -n M-3 if-shell 'tmux select-window -t :3' '' 'new-window -t :3'
bind-key -n M-4 if-shell 'tmux select-window -t :4' '' 'new-window -t :4'
bind-key -n M-5 if-shell 'tmux select-window -t :5' '' 'new-window -t :5'
bind-key -n M-6 if-shell 'tmux select-window -t :6' '' 'new-window -t :6'
bind-key -n M-7 if-shell 'tmux select-window -t :7' '' 'new-window -t :7'
bind-key -n M-8 if-shell 'tmux select-window -t :8' '' 'new-window -t :8'
bind-key -n M-9 if-shell 'tmux select-window -t :9' '' 'new-window -t :9'

bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
unbind-key -T copy-mode-vi Space     ;   bind-key -T copy-mode-vi v send-keys -X begin-selection
unbind-key -T copy-mode-vi Enter     ;   bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
unbind-key -T copy-mode-vi C-v       ;   bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
unbind-key -T copy-mode-vi [         ;   bind-key -T copy-mode-vi [ send-keys -X begin-selection
unbind-key -T copy-mode-vi ]         ;   bind-key -T copy-mode-vi ] send-keys -X copy-selection

# Automatically choose split direction with longest side scheme
bind-key -n M-Enter if-shell '[ "$(expr 25 \* #{pane_height} / 10 )" -lt "#{pane_width}" ]' \
    'split-pane -h -c "#{pane_current_path}"' \
    'split-pane -v -c "#{pane_current_path}"'

# Kill pane
bind-key -n M-Q kill-pane
# Copy mode
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'Morantron/tmux-fingers'
set -g @plugin 'tmux-plugins/tmux-cpu'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'thewtex/tmux-mem-cpu-load'
set -g @plugin 'nhdaly/tmux-better-mouse-mode'
#set -g @plugin 'tmux-plugins/vim-tmux-focus-events'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-cpu'
set -g @plugin 'christoomey/vim-tmux-navigator'

set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr 'fg=white,bg=blue'
set -g @continuum-save-interval '15'



run '~/.tmux/plugins/tpm/tpm'

